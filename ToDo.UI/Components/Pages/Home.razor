@page "/"
@inject ITaskService _taskService
<div class="px-2">
    @if(dailyTasks==null || dailyTasks.Count == 0)
    {
        <p>Loading Or No data found</p>
    }
    else
    {
        @foreach (var task in dailyTasks)
        {
            <div class="bg-dark text-white mb-2 d-flex align-items-center rounded-1 p-2" style="height:5rem;">
                <!-- Checkbox -->
                <div class="d-flex align-items-center justify-content-center mb-2 ms-1">
                    <input class="form-check-input fs-2 bg-dark text-white border-secondary p-0" type="checkbox" id="checkboxNoLabel" value="" aria-label="..." />
                </div>

                <!-- Task Details -->
                <div class="w-100 ms-2 ps-1">
                    <!-- Task Title -->
                    <div class="fs-5" style="font-weight:400;">
                        @task.Title
                    </div>

                    <!-- Extra Information -->
                    <div class="d-flex justify-content-between align-items-center mt-1">
                        <!-- Task Due Time -->
                        <div class="text-end small text-info">
                            Due: @task.DueTime.ToString("MMM dd, yyyy")
                        </div>
                        <!-- Category Badge -->
                        <span class="text-white px-2 py-1 rounded fs-7" style="background-color:@task.Category.ColorCode;">
                            @task.Category.Name
                        </span>
                    </div>
                </div>

                <!-- Priority & Status -->
                <div class="ms-3">
                    <div class="d-flex flex-column align-items-end">
                        <span class="badge text-bg-@GetPriorityClass(task.Priority) me-2 fs-7">
                            @task.Priority
                        </span>
                        <span class="badge text-bg-@GetStatusClass(task.Status) fs-7">
                            @task.Status
                        </span>
                    </div>
                </div>
            </div>
        }
    }
</div>
@code{
    private List<TaskItem> dailyTasks = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        dailyTasks = await _taskService.GetAllTasks();
    }
    private string GetPriorityClass(TodoPriority priority) => priority switch
    {
        TodoPriority.High => "danger",
        TodoPriority.Medium => "warning",
        TodoPriority.Low => "success",
        _ => "secondary"
    };

    private string GetStatusClass(TodoStatus status) => status switch
    {
        TodoStatus.Pending => "primary",
        TodoStatus.InProgress => "info",
        TodoStatus.Completed => "success",
        TodoStatus.Overdue => "dark",
        _ => "secondary"
    };
}