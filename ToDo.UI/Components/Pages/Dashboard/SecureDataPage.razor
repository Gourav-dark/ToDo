@page "/securedata"
@attribute [Authorize]
@inject ISecureDataService _secureDataService
@inject IAuthService _authService
@inject LoadingService _loadingService
@inject NavigationManager _navManager

<div class="px-2 mt-1">
    @if (secureDatas == null || secureDatas.Count == 0)
    {
        <EmptyTaskComponent />
    }
    else
    {
        @foreach (var data in secureDatas)
        {
            <div class="bg-dark text-white-50 mb-2 d-flex flex-column rounded-1 p-1 py-3">
                <div class="w-100 px-2 d-flex flex-column">
                    <span class="text-capitalize fs-6"
                        style="cursor: pointer;"
                        @onclick="() => NavigateToEdit(data.Id)">
                        @data.SiteName
                    </span>
                    <span class="fs-6">Email: <span class="text-white">@data.Email</span></span>
                </div>
                <div class="input-group px-2 text-white">
                    <input type="@(GetPasswordInputType(data))" class="form-control bg-dark text-white" @bind="@data.Password" readonly />
                    <button class="btn btn-outline-dark border-light" type="button" @onclick="() => TogglePasswordVisibility(data.Id)">
                        <i class="@(GetPasswordIcon(data.Id)) text-white"></i>
                    </button>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<SecureData> secureDatas = new();
    private HashSet<int> visiblePasswords = new();
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _loadingService.Show();
        await GetUserId();
        var response = await _secureDataService.GetByUserId(userId);
        _loadingService.Hide();
        if (response.Succeeded)
        {
            secureDatas = response.Data;
        }
    }

    private async Task GetUserId()
    {
        var response = await _authService.GetCurrentUser();
        userId = response.Data.UserId;
    }

    private void TogglePasswordVisibility(int id)
    {
        if (visiblePasswords.Contains(id))
        {
            visiblePasswords.Remove(id);
        }
        else
        {
            visiblePasswords.Add(id);
        }
    }

    private string GetPasswordInputType(SecureData data)
    {
        return visiblePasswords.Contains(data.Id) ? "text" : "password";
    }

    private string GetPasswordIcon(int id)
    {
        return visiblePasswords.Contains(id) ? "bi bi-eye-slash" : "bi bi-eye";
    }

    private void NavigateToEdit(int id)
    {
        _navManager.NavigateTo($"/edit-secure-data/{id}");
    }
}