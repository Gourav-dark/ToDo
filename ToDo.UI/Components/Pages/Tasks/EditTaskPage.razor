@page "/edit-task/{taskId:int}"
@inject ITaskService _taskService
@inject ICategoryService _categoryService
@inject NavigationManager _navManager
<div class="text-end pe-2 mt-1 mb-0" @onclick="OnDeleteBtnClick">
    <i class="bi bi-trash3 icon-size-low"></i>
</div>
<TaskForm TaskItem="taskItem" Categories="categories" OnTaskSaved="UpdateTaskAsync" IsEditMode="true" />

@code {
    [Parameter] public int taskId { get; set; }
    private TaskItemDTO taskItem = new();
    private List<Category> categories = new();

    protected override async Task OnInitializedAsync()
    {
        var categoriesResponse = await _categoryService.GetAll();
        if (categoriesResponse.Succeeded)
        {
            categories = categoriesResponse.Data;
        }

        var taskResponse = await _taskService.GetById(taskId);
        if (taskResponse.Succeeded)
        {
            taskItem.Title = taskResponse.Data.Title;
            taskItem.Description = taskResponse.Data.Description;
            taskItem.DueTime = taskResponse.Data.DueTime;
            taskItem.Priority = taskResponse.Data.Priority;
            taskItem.IsDailyTask = taskResponse.Data.IsDailyTask;
            taskItem.UserId = taskResponse.Data.UserId;
            taskItem.CategoryId = taskResponse.Data.CategoryId;
        }
    }

    private async Task UpdateTaskAsync(TaskItemDTO task)
    {
        var response = await _taskService.Update(taskId,task);

        if (response.Succeeded)
        {
            _navManager.NavigateTo("/");
        }
    }
    private async Task OnDeleteBtnClick()
    {
        var response = await _taskService.Delete(taskId);
        if (response.Succeeded)
        {
            _navManager.NavigateTo("/");
        }
    }
}
