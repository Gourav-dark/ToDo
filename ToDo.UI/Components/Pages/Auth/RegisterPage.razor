@page "/register"
@inject IUserService _userService

<div class="mt-5 text-white px-3">
    <div class="mt-3">
        <h1 class="fs-1">Register</h1>
    </div>
    <div class="mt-5">
        <EditForm Model="register" OnValidSubmit="Register">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="email" class="form-label fs-4">Email</label>
                <InputText id="email" class="form-control bg-dark text-white py-2 fs-5" @bind-Value="register.Email" placeholder="Enter your email" />
                <ValidationMessage For="() => register.Email" class="text-danger fs-7 pt-2" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label fs-4">Password</label>
                <InputText id="password" class="form-control bg-dark text-white py-2 fs-5" @bind-Value="register.Password" type="password" placeholder="Enter your password" />
                <ValidationMessage For="() => register.Password" class="text-danger fs-7 pt-2" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword" class="form-label fs-5">Confirm Password</label>
                <InputText id="confirmPassword" class="form-control bg-dark text-white  py-2 fs-5" @bind-Value="confirmPassword" type="password" placeholder="Re-enter your password" />
                @if (!string.IsNullOrEmpty(passwordMismatchError))
                {
                    <span class="text-danger fs-7 pt-2">@passwordMismatchError</span>
                }
            </div>
            <div class="d-grid mt-5">
                <button type="submit" class="btn btn-primary btn-block py-2 fs-3">Register</button>
            </div>
        </EditForm>
    </div>
    <div class="text-center mt-2">
        <span class="fs-6 text-white-50">Already have an account? </span><a>Login</a>
    </div>
</div>

@code {
    private UserDTO register = new UserDTO();
    private string? confirmPassword;
    private string? passwordMismatchError;

    private async Task Register()
    {
        // Clear any previous error message
        passwordMismatchError = string.Empty;

        // Validate if passwords match
        if (register.Password != confirmPassword)
        {
            passwordMismatchError = "Passwords do not match.";
            return;
        }

        try
        {
            // Attempt registration
            register.UserType = UserType.User;
            string userId = await _userService.Register(register);
        }
        catch (Exception ex)
        {
            // Handle any errors
            passwordMismatchError = "An error occurred during registration.";
        }
    }
}
