@inject NavigationManager _navManager
@inject LoadingService _loadingService

<div class="px-3 mt-1">
    <EditForm Model="TaskItem" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />

        <!-- Title -->
        <div class="mb-2">
            <label for="title" class="form-label">Task Title</label>
            <input type="text" id="title" class="form-control bg-dark text-white py-2 fs-5" @bind="TaskItem.Title" placeholder="Enter task title" />
            <ValidationMessage For="() => TaskItem.Title" class="text-danger fs-7 pt-2" />
        </div>

        <!-- Description -->
        <div class="mb-2">
            <label for="description" class="form-label">Task Description</label>
            <textarea id="description" class="form-control bg-dark text-white py-2 fs-5" @bind="TaskItem.Description" placeholder="Enter task description"></textarea>
        </div>

        <!-- Due Date -->
        <div class="mb-2">
            <label for="dueDate" class="form-label">Due Date</label>
            <input type="datetime-local" id="dueDate" class="form-control bg-dark text-white py-2 fs-5" @bind="TaskItem.DueTime" />
        </div>

        <!-- Priority -->
        <div class="mb-2">
            <label for="priority" class="form-label">Priority</label>
            <select id="priority" class="form-select bg-dark text-white py-2 fs-5" @bind="TaskItem.Priority">
                @foreach (TodoPriority priority in Enum.GetValues(typeof(TodoPriority)))
                {
                    <option class="bg-dark text-white py-2 fs-5" value="@priority">@priority</option>
                }
            </select>
        </div>

        <!-- Daily Task -->
        <div class="mb-2 form-check">
            <input type="checkbox" id="isDailyTask" class="form-check-input" @bind="TaskItem.IsDailyTask" />
            <label class="form-check-label" for="isDailyTask">Is this a daily task?</label>
        </div>

        <!-- Category -->
        @if (Categories == null || Categories.Count == 0)
        {
            <p>Loading categories...</p>
        }
        else
        {
            <div class="mb-2">
                <label for="category" class="form-label">Category</label>
                <select id="category" class="form-select bg-dark text-white py-2 fs-5" @bind="TaskItem.CategoryId">
                    @foreach (var category in Categories)
                    {
                        <option class="bg-dark text-white py-2 fs-5" value="@category.CategoryId">@category.Name</option>
                    }
                </select>
            </div>
        }

        <!-- Buttons -->
        <div class="mt-3 d-flex justify-content-between">
            <button type="submit" class="btn btn-primary px-5 py-2">Save</button>
            <button type="button" class="btn btn-secondary px-5 py-2" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public TaskItemDTO TaskItem { get; set; } = new();
    [Parameter] public EventCallback<TaskItemDTO> OnTaskSaved { get; set; }
    [Parameter] public List<Category> Categories { get; set; } = new();
    [Parameter] public bool IsEditMode { get; set; } = false;

    protected override void OnParametersSet()
    {
        // Ensure default category is selected if no category is set
        if (!IsEditMode && Categories != null && Categories.Any() && TaskItem.CategoryId == 1)
        {
            TaskItem.CategoryId = Categories.First().CategoryId;
        }
    }

    private async Task OnSubmit()
    {
        _loadingService.Show();
        if (OnTaskSaved.HasDelegate)
        {
            await OnTaskSaved.InvokeAsync(TaskItem);
        }
        _loadingService.Hide();
    }

    private void Cancel()
    {
        _navManager.NavigateTo("/");
    }
}
