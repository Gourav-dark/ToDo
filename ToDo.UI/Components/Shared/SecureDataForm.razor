@inject NavigationManager _navManager
<div class="px-3 mt-2">
    <EditForm Model="SecureData" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />

        <!-- Site Name -->
        <div class="mb-2">
            <label for="siteName" class="form-label">Site Name</label>
            <input type="text" id="siteName" class="form-control bg-dark text-white py-2 fs-5" @bind="SecureData.SiteName" placeholder="Enter site name" />
            <ValidationMessage For="() => SecureData.SiteName" class="text-danger" />
        </div>

        <!-- Email -->
        <div class="mb-2">
            <label for="email" class="form-label">Email</label>
            <input type="email" id="email" class="form-control bg-dark text-white py-2 fs-5" @bind="SecureData.Email" placeholder="Enter email (optional)" />
        </div>

        <!-- Password -->
        <div class="mb-2">
            <label for="password" class="form-label">Password</label>
            <input type="password" id="password" class="form-control bg-dark text-white py-2 fs-5" @bind="SecureData.Password" placeholder="Enter password" />
            <ValidationMessage For="() => SecureData.Password" class="text-danger" />
        </div>

        <!-- Buttons -->
        <div class="mt-3 d-flex justify-content-between">
            <button type="submit" class="btn btn-primary px-5 py-2">Save</button>
            <button type="button" class="btn btn-secondary px-5 py-2" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public SecureDataDTO SecureData { get; set; } = new();
    [Parameter] public EventCallback<SecureDataDTO> OnSecureDataSaved { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;

    private async Task OnSubmit()
    {
        if (OnSecureDataSaved.HasDelegate)
        {
            await OnSecureDataSaved.InvokeAsync(SecureData);
        }
    }

    private void Cancel()
    {
        _navManager.NavigateTo("/");
    }
}
